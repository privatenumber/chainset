const d=new Set(["toString","valueOf","name","constructor",Symbol.iterator,Symbol.asyncIterator,Symbol.toStringTag,Symbol.toPrimitive,"toJSON","nodeType","tagName","hasAttribute","asymmetricMatch","$$typeof","@@__IMMUTABLE_RECORD__@@","@@__IMMUTABLE_ITERABLE__@@"]),c=()=>Object.create(null),u=(l=c(),e={})=>new Proxy(l,{get(o,t){if(t in o)return o[t];if(d.has(t))return;const{allowedKeys:n}=e;if(n){if(typeof n=="function"){if(!n(t,o))return}else if(n instanceof RegExp){if(typeof t=="string"&&!n.test(t))return}else if(Array.isArray(n)&&!n.find(f=>f instanceof RegExp?typeof t=="string"&&f.test(t):t===f))return}let r=(e.defaultObject||c)(t);const{deep:i=!0}=e;if(i){const s={...e,deep:typeof i=="number"?i-1:i};r=u(r,s)}return o[t]=r,r}});export{u as default};
